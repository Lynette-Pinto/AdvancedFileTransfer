version: "3.9"

x-airflow-common:
  &airflow-common
  image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.9.2}
  build: .
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: ${AIRFLOW_DB_DIALECT}+${AIRFLOW_DB_CONNECTOR}://${AIRFLOW_DB_USER}:${AIRFLOW_DB_PASSWORD}@${AIRFLOW_DB_SERVER}:${AIRFLOW_DB_PORT}/${AIRFLOW_DB_NAME}
    AIRFLOW__CELERY__RESULT_BACKEND: db+${AIRFLOW_DB_DIALECT}://${AIRFLOW_DB_USER}:${AIRFLOW_DB_PASSWORD}@${AIRFLOW_DB_SERVER}:${AIRFLOW_DB_PORT}/${AIRFLOW_DB_NAME}
    AIRFLOW__CELERY__BROKER_URL: redis://${REDIS_PASSWORD}:@redis:${REDIS_PORT}/0
    AIRFLOW__WEBSERVER__BASE_URL: http://localhost/airflow
    AIRFLOW__WEBSERVER__ENABLE_PROXY_FIX: 'true'
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    AIRFLOW__CORE__TEST_CONNECTION: 'Enabled'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    AIRFLOW__WEBSERVER__SECRET_KEY: ${AIRFLOW__WEBSERVER__SECRET_KEY}
    _PIP_ADDITIONAL_REQUIREMENTS: ${AIRFLOW_PIP_ADDITIONAL_REQUIREMENTS:-}
  volumes:
    - ${AIRFLOW_PROJ_DIR:-C:/var/airflow}/dags:/var/airflow/dags
    - ${AIRFLOW_PROJ_DIR:-C:/var/airflow}/logs:/var/airflow/logs
    - ${AIRFLOW_PROJ_DIR:-C:/var/airflow}/config:/var/airflow/config
    - ${AIRFLOW_PROJ_DIR:-C:/var/airflow}/plugins:/var/airflow/plugins
    - ${AIRFLOW_PROJ_DIR:-C:/var/airflow}/test:/var/airflow/test
    - ${AIRFLOW_PROJ_DIR:-C:/var/airflow}/scripts:/var/airflow/scripts
    - ${AIRFLOW_PROJ_DIR:-C:/var/airflow}/api:/var/airflow/api
    - ${AIRFLOW_PROJ_DIR:-C:/var/airflow}/dag_json_data:/var/airflow/dag_json_data
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    # postgres:
    #   condition: service_healthy

services:
  #---------------------------------------SQL----------------------------------------
  postgres:
    image: postgres:13
    container_name: ${DOCKER_CONTAINER_NAME_AF}-postgres
    hostname: morphus-airflow-postgres
    environment:
      POSTGRES_USER: ${AIRFLOW_DB_USER}
      POSTGRES_PASSWORD: ${AIRFLOW_DB_PASSWORD}
      POSTGRES_DB: ${AIRFLOW_DB_NAME}
    volumes:
      - ${PGDATA_HOST_DIR:-C:/var/morphus/database/postgres}:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL","pg_isready -U ${AIRFLOW_DB_USER} -d ${AIRFLOW_DB_NAME} -h localhost -p 5432"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks: [morphus]
    profiles: ["with-postgres"]
    restart: unless-stopped

  #---------------------------------------Liquibase----------------------------------------
  # liquibase:
  #   container_name: ${DOCKER_CONTAINER_NAME_BE}-liquibase
  #   image: ${DOCKER_HUB_REPO_BE}-liquibase:${DOCKER_IMAGE_TAG_BE}
  #   env_file: [.env]
  #   hostname: ${DOCKER_CONTAINER_NAME_BE}-liquibase
  #   volumes:
  #     - C:/var/morphus/logs/liquibase:/app/logs
  #   restart: "no"
  #   depends_on:
  #     mysql:
  #       condition: service_healthy
  #   networks: [morphus]
  #   logging:
  #     driver: "json-file"
  #     options: { max-size: "500m", max-file: "1" }

  liquibase:
    image: ${DOCKER_HUB_REPO_BE}-liquibase:${DOCKER_IMAGE_TAG_BE}
    container_name: ${DOCKER_CONTAINER_NAME}-liquibase
    hostname: ${DOCKER_HUB_REPO_BE}-liquibase
    env_file:
      - .env
    restart: "no"
    networks:
      - morphus
    logging:
      driver: "json-file"
      options:
        max-size: "500m"
        max-file: "1"

  liquibase-depends-postgres:
    extends:
      service: liquibase
    depends_on:
      postgres:
        condition: service_healthy
    profiles: ["with-postgres"]

  #-------------------------------------Backend-------------------------------------
  api-gateway:
    container_name: ${DOCKER_CONTAINER_NAME_BE}-api-gateway
    image: ${DOCKER_HUB_REPO_BE}-api-gateway:${DOCKER_IMAGE_TAG_BE}
    env_file: [.env]
    hostname: ${DOCKER_CONTAINER_NAME_BE}-api-gateway
    restart: always
    volumes:
      - C:/var/morphus/logs/api-gateway:/app/logs
    networks: [morphus]
    logging:
      driver: "json-file"
      options:
        max-size: "500m"
        max-file: "1"
    depends_on:
      liquibase:
        condition: service_completed_successfully

  auth:
    container_name: ${DOCKER_CONTAINER_NAME_BE}-auth
    image: ${DOCKER_HUB_REPO_BE}-auth:${DOCKER_IMAGE_TAG_BE}
    environment:
      - SPRING_PROFILES_ACTIVE=default
      - POSTGRES_HOST=${AIRFLOW_DB_SERVER}
      - DB_USER=${AIRFLOW_DB_USER}
      - DB_PASSWORD=${AIRFLOW_DB_PASSWORD}
      - DB_DB=${BACKEND_DB_NAME}
      - DB_PORT=5432
    env_file: [.env]
    hostname: ${DOCKER_CONTAINER_NAME_BE}-auth
    restart: always
    volumes:
      - C:/var/morphus/logs/auth:/app/logs
      - C:/var/morphus/.ver:/var/morphus/.ver
    logging:
      driver: "json-file"
      options:
        max-size: "500m"
        max-file: "1"
    networks: [morphus]
    depends_on:
      liquibase:
        condition: service_completed_successfully

  user-access-management:
    container_name: ${DOCKER_CONTAINER_NAME_BE}-user-access-management
    image: ${DOCKER_HUB_REPO_BE}-user-access-management:${DOCKER_IMAGE_TAG_BE}
    environment:
      - SPRING_PROFILES_ACTIVE=default
      - POSTGRES_HOST=${AIRFLOW_DB_SERVER}
      - DB_USER=${AIRFLOW_DB_USER}
      - DB_PASSWORD=${AIRFLOW_DB_PASSWORD}
      - DB_DB=${BACKEND_DB_NAME}
      - DB_PORT=5432
    env_file: [.env]
    hostname: ${DOCKER_CONTAINER_NAME_BE}-user-access-management
    volumes:
      - C:/var/morphus/logs/user-access-management:/app/logs
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "500m"
        max-file: "1"
    networks: [morphus]
    depends_on:
      liquibase:
        condition: service_completed_successfully

  metadata:
    container_name: ${DOCKER_CONTAINER_NAME_BE}-metadata
    image: ${DOCKER_HUB_REPO_BE}-metadata:${DOCKER_IMAGE_TAG_BE}
    environment:
      - SPRING_PROFILES_ACTIVE=default
      - POSTGRES_HOST=${AIRFLOW_DB_SERVER}
      - DB_USER=${AIRFLOW_DB_USER}
      - DB_PASSWORD=${AIRFLOW_DB_PASSWORD}
      - DB_DB=${BACKEND_DB_NAME}
      - DB_PORT=5432
    env_file: [.env]
    hostname: ${DOCKER_CONTAINER_NAME_BE}-metadata
    volumes:
      - C:/var/morphus/logs/metadata:/app/logs
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "500m"
        max-file: "1"
    networks: [morphus]
    depends_on:
      liquibase:
        condition: service_completed_successfully

  email-notification:
    container_name: ${DOCKER_CONTAINER_NAME_BE}-email-notification
    image: ${DOCKER_HUB_REPO_BE}-email-notification:${DOCKER_IMAGE_TAG_BE}
    environment:
      - SPRING_PROFILES_ACTIVE=default
      - POSTGRES_HOST=${AIRFLOW_DB_SERVER}
      - DB_USER=${AIRFLOW_DB_USER}
      - DB_PASSWORD=${AIRFLOW_DB_PASSWORD}
      - DB_DB=${BACKEND_DB_NAME}
      - DB_PORT=5432
    env_file: [.env]
    hostname: ${DOCKER_CONTAINER_NAME_BE}-email-notification
    volumes:
      - C:/var/morphus/logs/metadata:/app/logs
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "500m"
        max-file: "1"
    networks: [morphus]
    depends_on:
      liquibase:
        condition: service_completed_successfully

  # -------------------------------------Airflow-------------------------------------
  redis:
    container_name: ${DOCKER_CONTAINER_NAME}-redis
    image: redis:7.2-bookworm
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    networks: [morphus]
    restart: always

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    environment:
      <<: *airflow-common-env
      DAG_JSON_DATA_DIR: /var/airflow/dag_json_data
      AIRFLOW__SCHEDULER__PARSING_PROCESSES: 4
      AIRFLOW__SCHEDULER__MIN_FILE_PROCESS_INTERVAL: 0
      AIRFLOW__SCHEDULER__DAG_DIR_LIST_INTERVAL: 5
      AIRFLOW__SCHEDULER__PARSE_MODE: lazy
    container_name: ${DOCKER_CONTAINER_NAME_AF}-webserver
    hostname: airflow-webserver
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/airflow"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    working_dir: /scripts
    restart: always
    volumes:
      - ${AIRFLOW_PROJ_DIR:-C:/var/airflow}/scripts:/scripts
      - ${DAG_JSON_DATA_DIR:-C:/var/airflow/dag_json_data}:/var/airflow/dag_json_data
    networks: [morphus]
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    container_name: ${DOCKER_CONTAINER_NAME_AF}-scheduler
    environment:
      <<: *airflow-common-env
      AIRFLOW__SCHEDULER__PARSING_PROCESSES: 4
      AIRFLOW__SCHEDULER__MIN_FILE_PROCESS_INTERVAL: 0
      AIRFLOW__SCHEDULER__DAG_DIR_LIST_INTERVAL: 5
      AIRFLOW__SCHEDULER__PARSE_MODE: lazy 
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks: [morphus]
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    container_name: ${DOCKER_CONTAINER_NAME_AF}-worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      <<: *airflow-common-env
      DUMB_INIT_SETSID: "0"
    networks: [morphus]
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    container_name: ${DOCKER_CONTAINER_NAME_AF}-triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks: [morphus]
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    container_name: ${DOCKER_CONTAINER_NAME_AF}-init
    command:
      - -c
      - |
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        pip3 install --no-cache-dir -r /sources/requirements.txt
        exec /entrypoint airflow version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${AIRFLOW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${AIRFLOW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "0:0"
    volumes:
      - ${AIRFLOW_PROJ_DIR:-C:/var/airflow}:/sources
    networks: [morphus]

  airflow-cli:
    <<: *airflow-common
    profiles: [debug]
    container_name: ${DOCKER_HUB_REPO_AIRFLOW}-airflow-cli
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    command: ["bash","-c","airflow"]
    networks: [morphus]

  flower:
    <<: *airflow-common
    command: celery flower
    container_name: ${DOCKER_CONTAINER_NAME_AF}-flower
    profiles: [flower]
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks: [morphus]
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  web:
    image: ${DOCKER_HUB_REPO_AIRFLOW}:${DOCKER_IMAGE_TAG_AIRFLOW}
    container_name: ${DOCKER_CONTAINER_NAME}-api-endpoint
    networks: [morphus]
    restart: unless-stopped
    depends_on:
      airflow-init:
        condition: service_completed_successfully
      redis:
        condition: service_healthy

  #---------------------------------------UI----------------------------------------
  morphus-ui-angular:
    image: "${DOCKER_HUB_REPO_UI}:${DOCKER_IMAGE_TAG_UI}"
    container_name: ${DOCKER_CONTAINER_NAME_UI}
    ports: 
      - "${UI_PORT}:80"
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "500m"
        max-file: "1"
    depends_on:
      - web
      - api-gateway
      - auth
      - user-access-management
      - metadata
      - email-notification  
    volumes:
      - C:/var/morphus/logs/ui:/var/log/nginx
    networks: [morphus]

networks:
  morphus:
    name: morphus
